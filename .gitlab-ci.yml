stages:
  - cache
  - test
  - check_secret
  - terraform
  - scan_image
  - security_policy_check
  - upload_artifacts

variables:
  DOCKER_USER: $DOCKER_USER
  DOCKER_PASSWORD: $DOCKER_PASSWORD
  TF_VERSION: "1.0.0"
  TF_WORKING_DIR: "terraform"  # Point to the terraform directory containing main.tf

before_script:
  - apt-get update && apt-get install -y curl gnupg unzip lsb-release
  - curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com focal main" > /etc/apt/sources.list.d/hashicorp.list
  - apt-get update
  - apt-get install -y terraform=${TF_VERSION} || (curl -fsSL https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip -o terraform.zip && unzip terraform.zip && mv terraform /usr/local/bin/ && rm terraform.zip)

# terraform:
#   stage: terraform
#   image: ubuntu:latest
#   services:
#     - docker:20.10.7-dind  # Ensure Docker-in-Docker is available
#   script:
#     - echo "Changing directory to Terraform working directory..."
#     - cd "${TF_WORKING_DIR}"  # Change to the terraform directory
#     - echo "Listing contents of the working directory:"
#     - ls -l  # Check if the Terraform configuration files exist
#     - echo "Initializing Terraform..."
#     - terraform init
#     - echo "Validating Terraform configuration..."
#     - terraform validate
#     - echo "Applying Terraform configuration..."
#   only:
#     - main

# terrascan:
#   image: tenable/terrascan:latest
#   stage: terraform
#   script:
#     - terrascan scan -d ${TF_WORKING_DIR}  # Scan the terraform directory
#   allow_failure: true

# trivy_scan:
#   image: bitnami/trivy:latest
#   stage: scan_image
#   script:
#     - trivy image --exit-code 1 --severity HIGH,CRITICAL hicham2004/akaunting-app:v1
#   allow_failure: false

checkov:
  image: bridgecrew/checkov:latest
  stage: security_policy_check
  script:
    - checkov --directory "${TF_WORKING_DIR}"  # Run Checkov against the Terraform directory
  allow_failure: false

opa_policy_check:
  image: openpolicyagent/opa:latest
  stage: security_policy_check
  script:
    - echo "Running OPA policy checks..."
    - opa eval --data policies.rego --input input.json --fail-defined
  before_script:
    - echo 'Ensure your "policies.rego" and "input.json" are added to the repository'
  allow_failure: false

upload_artifacts:
  stage: upload_artifacts
  image: alpine:latest
  script:
    - mkdir -p pipeline_artifacts
    - cp -r vendor/ composer.lock gitleaks.json pipeline_artifacts/
    - echo "Artifacts collected into pipeline_artifacts/"
  artifacts:
    when: always
    paths:
      - pipeline_artifacts/
    expire_in: 7 days
