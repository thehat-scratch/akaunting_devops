stages:
  - build_image
  - test
  - check_secret
  - terraform
  - scan_image
  - security_policy_check
  - upload_artifacts

variables:
  DOCKER_USER: $DOCKER_USER
  DOCKER_PASSWORD: $DOCKER_PASSWORD
  TF_VERSION: "1.0.0"
  TF_WORKING_DIR: "terraform"  # Point to the terraform directory containing main.tf

before_script:
  - apt-get update && apt-get install -y curl gnupg unzip lsb-release
  - curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com focal main" > /etc/apt/sources.list.d/hashicorp.list
  - apt-get update
  - apt-get install -y terraform=${TF_VERSION} || (curl -fsSL https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip -o terraform.zip && unzip terraform.zip && mv terraform /usr/local/bin/ && rm terraform.zip)

terraform:
  stage: terraform
  image: ubuntu:latest
  services:
    - docker:20.10.7-dind  # Ensure Docker-in-Docker is available
  script:
    - echo "Changing directory to Terraform working directory..."
    - cd "${TF_WORKING_DIR}"  # Change to the terraform directory
    - echo "Listing contents of the working directory:"
    - ls -l  # Check if the Terraform configuration files exist
    - echo "Initializing Terraform..."
    - terraform init
    - echo "Validating Terraform configuration..."
    - terraform validate
    - echo "Applying Terraform configuration..."
  only:
    - main

gitleaks:
  image:
    name: zricethezav/gitleaks
    entrypoint: [""] 
  stage: check_secret
  script:
    - gitleaks detect --verbose --source . --report-format json --report-path gitleaks.json
  artifacts:
    when: always
    paths:
      - gitleaks.json
  allow_failure: true

php_test:
  image: php:8.2
  stage: test
  before_script:
    - apt-get update && apt-get install -y unzip gpg curl libicu-dev libzip-dev libpng-dev
    - docker-php-ext-install bcmath intl gd zip
    - curl -sS https://getcomposer.org/installer | php
    - php composer.phar install
  script:
    - ./vendor/bin/phpunit --testdox
  cache:
    key:
      files:
        - composer.lock
    paths:
      - vendor/
      - composer.lock

terrascan:
  image: tenable/terrascan:latest
  stage: terraform
  script:
    - terrascan scan -d ${TF_WORKING_DIR}  # Scan the terraform directory
  allow_failure: true

trivy_scan:
  image: bitnami/trivy:latest
  stage: scan_image
  script:
    - trivy image --exit-code 1 --severity HIGH,CRITICAL userwater123/akaunting-app:v1
  allow_failure: false

checkov:
  image:
    name: bridgecrew/checkov:latest
    entrypoint: [""]  
  stage: security_policy_check
  script:
    - checkov --directory "${TF_WORKING_DIR}" 
  allow_failure: false

build_image:
  stage: build_image
  image: docker:24
  when: always
  services:
    - docker:24-dind
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USER" --password-stdin
  script:
    - docker pull akaunting/akaunting
    - docker tag akaunting/akaunting userwater123/akaunting-app:v1
    - docker push userwater123/akaunting-app:v1

opa_policy_check:
  image: golang:alpine
  before_script:
    - apk add --no-cache git
    - go install github.com/open-policy-agent/opa@latest
  script:
    - echo "Running OPA policy checks..."
    - ls ./policies/  # List files to verify the location
    - opa eval --data ./policies/policies.rego --input ./policies/input.json --fail-defined 'data.example.allow'
  stage: security_policy_check
  allow_failure: false

upload_artifacts:
  stage: upload_artifacts
  image: alpine:latest
  script:
    - mkdir -p pipeline_artifacts
    - cp -r vendor/ composer.lock gitleaks.json pipeline_artifacts/
    - echo "Artifacts collected into pipeline_artifacts/"
  artifacts:
    when: always
    paths:
      - pipeline_artifacts/
    expire_in: 7 days
